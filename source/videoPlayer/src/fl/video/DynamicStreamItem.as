package fl.video{	public class DynamicStreamItem extends Object	{				/**		 * streamArray		 * Array of streams and bitrates		 * 		 */		private var streamArray:Array;				/**		 * Start time for the stream		 * Default is 0		 * This value is currently not supported by the FLVPlayback component.		 */				public var start:Number;				/**		 * len:Number		 * Default is -1 to coincide with defaults for NetStream.play()		 * This value is currently not supported by the FLVPlayback component.		 */				public var len:Number;				/**		 * reset:Boolean		 * Default is true to coincide with defaults for NetStream.play()		 * This value is currently not supported by the FLVPlayback component.		 */				public var reset:Boolean;				/**		 * streamCount		 * This is the number of encodings you have present.		 */				public var streamCount:int;		/**		 * startRate		 * The DynamicStream class will begin playing the stream that is equal to or in excess of this value		 * if the historical max bandwidth exceeds this preferred start rate.		 */		public var startRate:Number;				/**		 * The RTMP URI the server should attempt to connect to.		 */		public var uri:String;				/**		 * Constructor for DynamicStreamOptions		 * 		 * Usage:		 * var ds:DynamicStream = new DynamicStream(nc);		 * 		 * var dsi:DynamicStreamItem = new DynamicStreamItem();		 * 		 * dsi.addStream("mp4:The Simpsons Movie_ipod.m4v", 736);		 * dsi.addStream("mp4:The Simpsons Movie_480p.mov", 1000);		 * dsi.addStream("mp4:The Simpsons Movie_720p.mov", 5640);		 * 		 * ds.startPlay(dso);		 * 		 */		public function DynamicStreamItem() {						streamArray = new Array();				streamCount = NaN;			start = 0;			len = -1;			reset = true;		}				/**		 * Adds a stream and bitrate pair to the DynamicStreamItem object 		 * @param streamName		 * @param bitRate		 * 		 */				public function addStream(streamName:String, bitRate:Number):void {					if(!isNaN(bitRate)) {				streamArray.push({name:streamName, rate:bitRate});			}			streamArray.sortOn("rate", Array.NUMERIC);				}				/**		 * Returns the array of stream/bitrate pairs 		 * @return 		 * 		 */				public function get streams():Array {			return streamArray;		}			}}